// <auto-generated />
using System;
using EasyTalents.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EasyTalents.Infra.Migrations
{
    [DbContext(typeof(EasyTalentsContext))]
    partial class EasyTalentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EasyTalents.Domain.Entities.BestTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BestTime");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Morning (from 08:00 to 12:00) / Manhã (de 08:00 ás 12:00)"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Afternoon (from 1:00 p.m. to 6:00 p.m.) / Tarde (de 13:00 ás 18:00)"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Night (7:00 p.m. to 10:00 p.m.) /Noite (de 19:00 as 22:00)"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Dawn (from 10 p.m. onwards) / Madrugada (de 22:00 em diante)"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Business (from 08:00 a.m. to 06:00 p.m.) / Comercial (de 08:00 as 18:00)"
                        });
                });

            modelBuilder.Entity("EasyTalents.Domain.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CrudRating")
                        .HasColumnType("int");

                    b.Property<string>("CrudUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraKnowledges")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Portfolio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalaryRequirements")
                        .HasColumnType("int");

                    b.Property<string>("Skype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("EasyTalents.Domain.Entities.CandidateBestTimes", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BestTimeId")
                        .HasColumnType("int");

                    b.HasKey("CandidateId", "BestTimeId");

                    b.HasIndex("BestTimeId");

                    b.ToTable("CandidateBestTimes");
                });

            modelBuilder.Entity("EasyTalents.Domain.Entities.CandidateKnowledges", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("KnowledgeId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("CandidateId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("CandidateKnowledges");
                });

            modelBuilder.Entity("EasyTalents.Domain.Entities.CandidateWorkingTimes", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkingTimeId")
                        .HasColumnType("int");

                    b.HasKey("CandidateId", "WorkingTimeId");

                    b.HasIndex("WorkingTimeId");

                    b.ToTable("CandidateWorkingTimes");
                });

            modelBuilder.Entity("EasyTalents.Domain.Entities.Knowledge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Knowledge");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Ionic"
                        },
                        new
                        {
                            Id = 2,
                            Description = "ReactJS"
                        },
                        new
                        {
                            Id = 3,
                            Description = "React Native"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Android"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Flutter"
                        },
                        new
                        {
                            Id = 6,
                            Description = "SWIFT"
                        },
                        new
                        {
                            Id = 7,
                            Description = "IOS"
                        },
                        new
                        {
                            Id = 8,
                            Description = "HTML"
                        },
                        new
                        {
                            Id = 9,
                            Description = "CSS"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Bootstrap"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Jquery"
                        },
                        new
                        {
                            Id = 12,
                            Description = "AngularJs 1.*"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Angular"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Java"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Python"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Flask"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Asp.Net MVC"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Asp.Net WebForm"
                        },
                        new
                        {
                            Id = 19,
                            Description = "C"
                        },
                        new
                        {
                            Id = 20,
                            Description = "C#"
                        },
                        new
                        {
                            Id = 21,
                            Description = "NodeJS"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Express - NodeJs"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Cake"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Django"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Majento"
                        },
                        new
                        {
                            Id = 26,
                            Description = "PHP"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Vue"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Wordpress"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Phyton"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Ruby"
                        },
                        new
                        {
                            Id = 31,
                            Description = "My SQL Server"
                        },
                        new
                        {
                            Id = 32,
                            Description = "My SQL"
                        },
                        new
                        {
                            Id = 33,
                            Description = "Salesforce"
                        },
                        new
                        {
                            Id = 34,
                            Description = "Photoshop"
                        },
                        new
                        {
                            Id = 35,
                            Description = "Illustrator"
                        },
                        new
                        {
                            Id = 36,
                            Description = "SEO"
                        },
                        new
                        {
                            Id = 37,
                            Description = "Laravel"
                        });
                });

            modelBuilder.Entity("EasyTalents.Domain.Entities.WorkingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkingTime");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Up to 4 hours per day / Até 4 horas por dia"
                        },
                        new
                        {
                            Id = 2,
                            Description = "4 to 6 hours per day / De 4 á 6 horas por dia"
                        },
                        new
                        {
                            Id = 3,
                            Description = "6 to 8 hours per day /De 6 á 8 horas por dia"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Up to 8 hours a day (are you sure?) / Acima de 8 horas por dia (tem certeza?)"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Only weekends / Apenas finais de semana"
                        });
                });

            modelBuilder.Entity("EasyTalents.Domain.Entities.CandidateBestTimes", b =>
                {
                    b.HasOne("EasyTalents.Domain.Entities.BestTime", "BestTime")
                        .WithMany()
                        .HasForeignKey("BestTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyTalents.Domain.Entities.Candidate", "Candidate")
                        .WithMany("BestTimes")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyTalents.Domain.Entities.CandidateKnowledges", b =>
                {
                    b.HasOne("EasyTalents.Domain.Entities.Candidate", "Candidate")
                        .WithMany("Knowledges")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyTalents.Domain.Entities.Knowledge", "Knowledge")
                        .WithMany()
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyTalents.Domain.Entities.CandidateWorkingTimes", b =>
                {
                    b.HasOne("EasyTalents.Domain.Entities.Candidate", "Candidate")
                        .WithMany("WorkingTimes")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyTalents.Domain.Entities.WorkingTime", "WorkingTime")
                        .WithMany()
                        .HasForeignKey("WorkingTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
